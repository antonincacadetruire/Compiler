.malloc
resn 1
push 0 
read
dup
set 1      ; r
drop 1
push 0 
read
get 0        ; nom variable : n
add
dup
push 0 
write
drop 1
get 1        ; nom variable : r
ret
push 0
ret
.free
resn 0
push 0
ret
.printrec
resn 1
get 0        ; nom variable : n
push 10 
div
dup
set 1      ; up
drop 1
get 1        ; nom variable : up
push 0 
cmpgt
jumpf else_0       ; if false 
prep printrec
get 1        ; nom variable : up
call 1
drop 1
get 0        ; nom variable : n
push 10 
mod
push 48 
add
send
jump end_cond_0    ; end if, begin else
.else_0            ; end else 
get 0        ; nom variable : n
push 48 
add
send
.end_cond_0
push 0
ret
.print
resn 0
prep printrec
get 0        ; nom variable : n
call 1
drop 1
push 10 
send
push 0
ret
.read
resn 3
push 48 
dup
set 0      ; a
drop 1
push 0 
dup
set 1      ; result
drop 1
push 10 
dup
set 2      ; compteur
drop 1
.loop1_1
.loop3_1
get 0        ; nom variable : a
push 10 
cmpne
jumpf else_2       ; if false 
recv
dup
set 0      ; a
drop 1
get 0        ; nom variable : a
push 48 
cmpge
get 0        ; nom variable : a
push 58 
cmplt
and
jumpf else_3       ; if false 
get 1        ; nom variable : result
get 2        ; nom variable : compteur
mul
get 0        ; nom variable : a
push 48 
sub
add
dup
set 1      ; result
drop 1
jump end_cond_3    ; end if, begin else
.else_3            ; end else 
.end_cond_3
jump end_cond_2    ; end if, begin else
.else_2            ; end else 
jump loop2_1
.end_cond_2
jump loop1_1
.loop2_1
get 1        ; nom variable : result
ret
push 0
ret
.bubbleSort
resn 3
push 0 
dup
set 2      ; i
.loop1_4
get 2        ; nom variable : i
get 1        ; nom variable : n
push 1 
sub
cmplt
jumpf else_5       ; if false 
push 0 
dup
set 3      ; j
.loop1_6
get 3        ; nom variable : j
get 1        ; nom variable : n
get 2        ; nom variable : i
sub
push 1 
sub
cmplt
jumpf else_7       ; if false 
get 0        ; nom variable : arr
get 3        ; nom variable : j
add
read
get 0        ; nom variable : arr
get 3        ; nom variable : j
push 1 
add
add
read
cmpgt
jumpf else_8       ; if false 
get 0        ; nom variable : arr
get 3        ; nom variable : j
add
read
dup
set 4      ; temp
drop 1
get 0        ; nom variable : arr
get 3        ; nom variable : j
push 1 
add
add
read
dup
get 0        ; nom variable : arr
get 3        ; nom variable : j
add
write
drop 1
get 4        ; nom variable : temp
dup
get 0        ; nom variable : arr
get 3        ; nom variable : j
push 1 
add
add
write
drop 1
jump end_cond_8    ; end if, begin else
.else_8            ; end else 
.end_cond_8
jump end_cond_7    ; end if, begin else
.else_7            ; end else 
jump loop2_6
.end_cond_7
.loop3_6
get 3        ; nom variable : j
push 1 
add
dup
set 3      ; j
jump loop1_6
.loop2_6
jump end_cond_5    ; end if, begin else
.else_5            ; end else 
jump loop2_4
.end_cond_5
.loop3_4
get 2        ; nom variable : i
push 1 
add
dup
set 2      ; i
jump loop1_4
.loop2_4
push 0
ret
.processArray
resn 2
prep malloc
get 0        ; nom variable : n
call 1
dup
set 1      ; arr
drop 1
push 0 
dup
set 2      ; i
.loop1_9
get 2        ; nom variable : i
get 0        ; nom variable : n
cmplt
jumpf else_10       ; if false 
get 0        ; nom variable : n
get 2        ; nom variable : i
sub
dup
get 1        ; nom variable : arr
get 2        ; nom variable : i
add
write
drop 1
jump end_cond_10    ; end if, begin else
.else_10            ; end else 
jump loop2_9
.end_cond_10
.loop3_9
get 2        ; nom variable : i
push 1 
add
dup
set 2      ; i
jump loop1_9
.loop2_9
prep bubbleSort
get 1        ; nom variable : arr
get 0        ; nom variable : n
call 2
drop 1
push 0 
dup
set 2      ; i
.loop1_11
get 2        ; nom variable : i
get 0        ; nom variable : n
cmplt
jumpf else_12       ; if false 
prep print
get 1        ; nom variable : arr
get 2        ; nom variable : i
add
read
call 1
drop 1
jump end_cond_12    ; end if, begin else
.else_12            ; end else 
jump loop2_11
.end_cond_12
.loop3_11
get 2        ; nom variable : i
push 1 
add
dup
set 2      ; i
jump loop1_11
.loop2_11
prep free
get 1        ; nom variable : arr
call 1
drop 1
push 0
ret
.main
resn 1
push 64 
dup
set 0      ; n
drop 1
prep processArray
get 0        ; nom variable : n
call 1
drop 1
push 0 
ret
push 0
ret
.start
prep main
call 0
halt 
