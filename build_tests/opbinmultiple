.malloc
resn 1
push 0 
read
dup
set 1      ; r
drop 1
push 0 
read
get 0        ; nom variable : n
add
dup
push 0 
write
drop 1
get 1        ; nom variable : r
ret
push 0
ret
.free
resn 0
push 0
ret
.printrec
resn 1
get 0        ; nom variable : n
push 10 
div
dup
set 1      ; up
drop 1
get 1        ; nom variable : up
push 0 
cmpgt
jumpf else_0       ; if false 
prep printrec
get 1        ; nom variable : up
call 1
drop 1
get 0        ; nom variable : n
push 10 
mod
push 48 
add
send
jump end_cond_0    ; end if, begin else
.else_0            ; end else 
get 0        ; nom variable : n
push 48 
add
send
.end_cond_0
push 0
ret
.print
resn 0
prep printrec
get 0        ; nom variable : n
call 1
drop 1
push 10 
send
push 0
ret
.read
resn 3
push 48 
dup
set 0      ; a
drop 1
push 0 
dup
set 1      ; result
drop 1
push 10 
dup
set 2      ; compteur
drop 1
.loop1_1
.loop3_1
get 0        ; nom variable : a
push 10 
cmpne
jumpf else_2       ; if false 
recv
dup
set 0      ; a
drop 1
get 0        ; nom variable : a
push 48 
cmpge
get 0        ; nom variable : a
push 58 
cmplt
and
jumpf else_3       ; if false 
get 1        ; nom variable : result
get 2        ; nom variable : compteur
mul
get 0        ; nom variable : a
push 48 
sub
add
dup
set 1      ; result
drop 1
jump end_cond_3    ; end if, begin else
.else_3            ; end else 
.end_cond_3
jump end_cond_2    ; end if, begin else
.else_2            ; end else 
jump loop2_1
.end_cond_2
jump loop1_1
.loop2_1
get 1        ; nom variable : result
ret
push 0
ret
.main
resn 0
push 3 
push 4 
push 2 
not 
add
mul
push 5 
push 0 
push 3 
sub 
sub
push 2 
push 1 
add
mul
sub
push 2 
push 7 
push 3 
sub
mul
push 1 
add
div
push 8 
push 4 
push 1 
sub
div
add
push 0 
push 2 
sub 
push 6 
push 2 
div
mul
add
dbg
push 0
ret
.start
prep main
call 0
halt 
